from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery
from create_bot import bot
from data_base.dao import get_notes_by_user
from keyboards_my.note_kb import main_note_kb, find_note_kb, generate_date_keyboard, generate_type_content_keyboard
from utils.utils import send_many_notes


class FindNoteStates(StatesGroup):
    text = State()  # –û–∂–∏–¥–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–º–µ—Ç–æ–∫


find_note_router = Router()


@find_note_router.message(F.text == 'üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–º–µ—Ç–æ–∫')
async def start_views_noti(message: Message, state: FSMContext):
    await state.clear()
    await message.answer('–í—ã–±–µ—Ä–∏ –∫–∞–∫–∏–µ –∑–∞–º–µ—Ç–∫–∏ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å', reply_markup=find_note_kb())


@find_note_router.message(F.text == 'üìã –í—Å–µ –∑–∞–º–µ—Ç–∫–∏')
async def all_views_noti(message: Message, state: FSMContext):
    await state.clear()
    all_notes = await get_notes_by_user(user_id=message.from_user.id)
    if all_notes:
        await send_many_notes(all_notes, bot, message.from_user.id)
        await message.answer(f'–í—Å–µ –≤–∞—à–∏ {len(all_notes)} –∑–∞–º–µ—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!', reply_markup=main_note_kb())
    else:
        await message.answer('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏!', reply_markup=main_note_kb())

# –ü–æ–∏—Å–∫ –∑–∞–º–µ—Ç–æ–∫ –ø–æ –¥–∞—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.
@find_note_router.message(F.text == 'üìÖ –ü–æ –¥–∞—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è')
async def date_views_noti(message: Message, state: FSMContext):
    await state.clear()
    all_notes = await get_notes_by_user(user_id=message.from_user.id)
    if all_notes:
        await message.answer('–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –≤–∞–º –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∑–∞–º–µ—Ç–∫–∏?',
                             reply_markup=generate_date_keyboard(all_notes))
    else:
        await message.answer('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏!', reply_markup=main_note_kb())


@find_note_router.callback_query(F.data.startswith('date_note_'))
async def find_note_to_date(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await state.clear()
    date_add = call.data.replace('date_note_', '')
    all_notes = await get_notes_by_user(user_id=call.from_user.id, date_add=date_add)
    await send_many_notes(all_notes, bot, call.from_user.id)
    await call.message.answer(f'–í—Å–µ –≤–∞—à–∏ {len(all_notes)} –∑–∞–º–µ—Ç–æ–∫ –Ω–∞ {date_add} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!',
                              reply_markup=main_note_kb())








